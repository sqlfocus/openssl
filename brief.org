#+TITLE: openssl摘录
#+AUTHOR: sqlfocus


本系列文档摘录openssl的内部实现，以期深入了解SSL的交互流程，及与加速卡
的整合流程！

* 代码组织
 - apps                   :: 命令行程序
 - crypto                 :: 加解密算法库
 - demos                  :: 示例程序
 - ssl                    :: TLS协议库

* DER编码
http://blog.csdn.net/sever2012/article/details/7698297
http://blog.csdn.net/baidu_36649389/article/details/53538223

* PEM格式
参考RFC1421-1424
#+BEGIN_EXAMPLE
Pre-Encapsulation Boundary (Pre-EB)
  -----BEGIN PRIVACY-ENHANCED MESSAGE-----

Encapsulated Header Portion
  (Contains encryption control fields inserted in plaintext.
  Examples include "DEK-Info:" and "Key-Info:".
  Note that, although these control fields have line-oriented
  representations similar to RFC 822 header fields, the set
  of fields valid in this context is disjoint from those used
  in RFC 822 processing.)

Blank Line
  (Separates Encapsulated Header from subsequent Encapsulated Text Portion)

Encapsulated Text Portion
  (Contains message data encoded as specified in Section 4.3.)

Post-Encapsulation Boundary (Post-EB)
  -----END PRIVACY-ENHANCED MESSAGE-----
#+END_EXAMPLE

封装头
- Proc-Type      :: 指明此PEM消息采用的操作
  : 必须为第一个封装头
  : 值为两部分，利用逗号分隔
  : 值第一部分用于封装头识别码，一般为4
  : 值第二部分代表各种操作
  :   ENCRYPTED
  :   MIC-ONLY
  :   MIC-CLEAR
  :   CRL
- DEK-Info       :: 指明加密算法及模式
  : 值分两部分或一部分，利用逗号隔开
  : 第一部分用于说明算法，及模式
  : 第二部分可选，用于第一部分所需的参数等

** 私钥
#+BEGIN_EXAMPLE
利用命令查看私钥cake.pem内容
$ openssl rsa -in cakey.pem -noout -text
包含内容项
  modulus               128
  publicExponent        3
  privateExponent       128
  prime1                64
  prime2                64
  exponent1             64
  exponent2             64
  coefficient           64

真实的私钥文件，cake.pem
-----BEGIN ENCRYPTED PRIVATE KEY-----
MIIFDjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQI0iaDwVuH4esCAggA
MBQGCCqGSIb3DQMHBAhpuGqj05IhWgSCBMgL1p4u1LR3pGtnq4I3vdme1vARrNJ+
kHfK5r4a1yXPRYkGcAJCcvidQqr5W2Qwyczx0bFt5vJIJEZbGUvKdZ5zs3k7fdKg
EBf7xkPdRGFKGi76gXA8paztVcakYu9J/ZdOy32o7Q65D3udRhl/P+s077Vn6d8G
6WQfoDIvfoHDnQ2fFuLDjIvn+XD5UFsnNGSdGzaItTzv24p2Fh7odo0aYggN+dZZ
tcZfVyf7GjvyeOag6fm2cXbEUhaSTuCutbDOAYemtHgHrENYKAgm1CGPGqzL3hGR
9Ct5NkUBr90tvyVXrjB46jp6VUHd6+9zwpFe7ib1CxnI3HElYJQp/CONt7GBJt9U
nJaGbwD4+ryraXhtArNCwk0W3LaTNI+sKVqUyd43iwJectbuI3suCSA17N73imVt
EmHmaRriSGoTsXGucNN/PxdIpVndlngiAtWcZqEsX3a6I8Vt3gBk7k/8f9EoxqLW
IdYCR28GUITHbyqsc8y4fYIYUADezvKZAzvaNmaUJfBxdJWkthOXnK/Y6hwBFmZ9
EkMMm0olnE73ZeR0iZjS6+izK6y88KgA2QkODWZERcg2XMjPZYW8JL0w3dfLP0pC
BcMjS3RW1405JYeCnMCw770+08fCGtTOa7u1IULFz02gdzn6XRYcGyXT044LE1KC
WxdKHPdb86V+TOr0fVDqHEjalalM2AmeBGBX32UFoJWKIl/2gudXupmOEjNL8+Wq
LIa5RlnPY6r3FgSq0iCel5MAIbLnOdN0Rl187expgrzpmDPdlKkWFIRPldxUJ5rm
L9URF+kzDYQw/rJD/UGF54lTOt92oRbn99pnBJZqFsI3onIMaoVPDVvG740L44l4
xVJRTzmT8i2oqa7uZ7P2q8G15YnmaCJG3NosX/uOhbAVrX1GhS16fdUhVdrSd3gi
vzjf7seHN7s0C1b8KkJfC7xqndmvhqv1HG6cjEP+qGT3bIqDeyoE1qAlEvo7CoKo
6X1+dsVI4jvF2rGSVVrq7EyYGNjRJyGuYH9uBDp81C04yRvJD4nepq3BBBDUJ/nA
IdMtAVQO7n01t5bj5V/ckmzA8K0n0mynpnYpgKvnE2uli7TIVT/s6ngjYD0yPrM6
soJYrPCktkfZYrDrMIE9YLvaeSVuTOfFzMr5YWV/IaGgyTkJv/0JTIBZz18txihK
dhyGVLaTx2PThgMTxzDk48qUAw1jZi67L9kRicLE38w1aAjnoGplkJiPT5B8EWUM
0luU/GDqbxD765QnGsMs5z6jIMEz/9q9eBmslFdG5oi1oC/b35L51pzBVzMmrwtv
DP1ClhABFEgRcETFK/pKuVyldlpZVRK/UDJOkU0pZT3L9TCpz6jn8OVKC+5cpsHL
KqAZL85QdsrcFyOmJSOhjnUHYZhkvmj6k1+e2WpQBn3oQp67SH7ysZNZQBKlJOgL
5xAHu6qHF8M8dHWB+K/Wp+zMfLCYiQ83lQLt4DvcSyH0aPv+/so8PS4wBwV7dBBE
ly+oh6IvUlOyhlu56l2FmE4cnVyaxTf5cJJKmFNOSg8TRVM3DqmWBHKMPegPddys
wuhSh8TMHAsgXql4Ba3AoDXVbPbzHBo8N4CfgmSxoplnj6/crn5g1ofLAtzokq8E
3kw=
-----END ENCRYPTED PRIVATE KEY-----
#+END_EXAMPLE

** 公钥
#+BEGIN_EXAMPLE
#+END_EXAMPLE

* X509格式
rfc 5280

* 非对成加密
** RSA算法原理
[[file:RSA%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.pdf][file:RSA算法原理.pdf]]
http://blog.csdn.net/dbs1215/article/details/48953589
rfc 8017

** rsa


* 对称加密
** 类型
 - block ciphers
   : traditionally the most popular
   : operate by breaking up data into fixed-size blocks, and then encrypting each block individually
   : Leftover data is traditionally padded so that the length of the plaintext is a multiple of the cipher's block size
 - stream ciphers
   : essentially just cryptographic pseudorandom number generators
   : use a starting seed as a key to produce a stream of random bits known as the keystream
   : To encrypt data, one takes the plaintext and simply XORs it with the keystream
   :
   : stream ciphers tend to be far faster than block ciphers

** 块儿加密模式
http://blog.csdn.net/jackyechina/article/details/52522971
OpenSSL实现了块儿加密的四种常用模式
 - ECB(Electronic Code Book) mode
   : 电码本模式
   : basic mode of operation
   :
   : takes a single block of plaintext and produces a single block of ciphertext
   : Data streams are broken into blocks that are individually processed
   :
   : 优点
   :   messages can be encrypted in parallel
   : 缺点
   :   highly susceptible to dictionary attacks
   :   is almost always the wrong mode for the job, because it is so difficult to use securely
 - CBC(Cipher Block Chaining) mode
   : 一个明文分组在被加密之前要与前一个的密文分组进行异或运算
   :
   : 需协商一个初始化向量(IV)，此IV没有实际意义，只在计算第一分组密文前被用
   : 于异或操作，避免"dictionary attacks are possible if the data streams 
   : have common beginning sequences"
   :
   : 缺点
   :   加密过程是串行的，无法被并行化
 - CFB(Cipher Feedback) mode
   : 密文反馈
   : one way of turning a block cipher into a stream cipher
   : 
   : 需要使用一个与块的大小相同的移位寄存器，并用IV将寄存器初始化; 然后，将
   : 寄存器内容使用块密码加密，然后将结果的最高x位与平文的x进行异或，以产生
   : 密文的x位; 下一步将生成的x位密文移入寄存器中，并对下面的x位平文重复这
   : 一过程
   :
   : 解密过程与加密过程相似，以IV开始，对寄存器加密，将结果的高x与密文异或，
   : 产生x位平文，再将密文的下面x位移入寄存器
   :
   : 缺点
   :   a complete block of plaintext must be received before encryption can begin
   :   加密过程不能并行化
   :   avoid reusing the same key when using CFB mode
 - OFB(Output Feedback) mode
   : 输出反馈模式
   : another way of turning a block cipher into a stream cipher

** des定义
利用宏定义算法套件，~/crypto/evp/e_des.c
#+BEGIN_EXAMPLE
BLOCK_CIPHER_defs(des, EVP_DES_KEY, NID_des, 8, 8, 8, 64,
                  EVP_CIPH_RAND_KEY, des_init_key, NULL,
                  EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl)

===>
BLOCK_CIPHER_def_cbc(des, EVP_DES_KEY, NID_des, 8, 8, 8, EVP_CIPH_RAND_KEY, \
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl) \
BLOCK_CIPHER_def_cfb(des, EVP_DES_KEY, NID_des, 8, 8, 64, EVP_CIPH_RAND_KEY,\
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl) \
BLOCK_CIPHER_def_ofb(des, EVP_DES_KEY, NID_des, 8, 8, 64, EVP_CIPH_RAND_KEY,\
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl) \
BLOCK_CIPHER_def_ecb(des, EVP_DES_KEY, NID_des, 8, 8, EVP_CIPH_RAND_KEY, \
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl)

===>
BLOCK_CIPHER_def1(des, cbc, cbc, CBC, EVP_DES_KEY, NID_des, 8, 8, 8, EVP_CIPH_RAND_KEY, \
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl) \
BLOCK_CIPHER_def1(des, cfb64, cfb64, CFB, EVP_DES_KEY, NID_des, 1, 8, 8, EVP_CIPH_RAND_KEY,\
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl) \
BLOCK_CIPHER_def1(des, ofb64, ofb, OFB, EVP_DES_KEY, NID_des, 1, 8, 8, EVP_CIPH_RAND_KEY,\
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl) \
BLOCK_CIPHER_def1(des, ecb, ecb, ECB, EVP_DES_KEY, NID_des, 8, 8, 0, EVP_CIPH_RAND_KEY, \
                     des_init_key, NULL, EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl)

===>
static const EVP_CIPHER des_cbc = {
    NID_des_cbc, 8, 8, 8,
    EVP_CIPH_RAND_KEY | EVP_CIPH_CBC_CBC,
    des_init_key,
    des_cbc_cipher,
    NULL,
    sizeof(EVP_DES_KEY),
    EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, 
    des_ctrl
    NULL
};
const EVP_CIPHER *EVP_des_cbc(void) { return &des_cbc; }

static const EVP_CIPHER des_cfb64 = {
    NID_des_cfb64, 1, 8, 8,
    EVP_CIPH_RAND_KEY | EVP_CIPH_CFB_CFB,
    des_init_key,
    des_cfb64_cipher,
    NULL,
    sizeof(EVP_DES_KEY),
    EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, 
    des_ctrl
    NULL
};
const EVP_CIPHER *EVP_des_cfb64(void) { return &des_cfb64; }

static const EVP_CIPHER des_ofb = {
    NID_des_ofb64, 1, 8, 8,
    EVP_CIPH_RAND_KEY | EVP_CIPH_CBC_CBC,
    des_init_key,
    des_ofb_cipher,
    NULL,
    sizeof(EVP_DES_KEY),
    EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, 
    des_ctrl
    NULL
};
const EVP_CIPHER *EVP_des_ofb(void) { return &des_ofb; }

static const EVP_CIPHER des_ecb = {
    NID_des_ecb, 8, 8, 0,
    EVP_CIPH_RAND_KEY | EVP_CIPH_CBC_CBC,
    des_init_key,
    des_ecb_cipher,
    NULL,
    sizeof(EVP_DES_KEY),
    EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, 
    des_ctrl
    NULL
};
const EVP_CIPHER *EVP_des_ecb(void) { return &des_ecb; }
#+END_EXAMPLE

* 客户端示例
 - openssl s_client
   : 客户端子命令, s_client_main() in ~/apps/s_client.c
 - 精简客户端
   : main() in ~/demos/bio/sconnect.c

* 服务器示例
 - openssl s_server
   : 服务器子命令, s_server_main() in ~/apps/s_server.c
 - 精简服务器
   : main() in ~/demos/bio/saccept.c

* SSL_do_handshake()
定义文件：~/ssl/ssl_lib.c
作用： 握手协商入口

#+BEGIN_EXAMPLE
-SSL_connect()                      客户端启动协商, ssl/ssl_lib.c
  -SSL_set_connect_state()
  -SSL_do_handshake()
    -ossl_statem_connect()          ssl/statem/statem.c
      -state_machine(,0)            状态机驱动的握手流程
  
-SSL_accept()                       服务器端启动协商, ssl/ssl_lib.c
  -SSL_set_accept_state()
  -SSL_do_handshake()
    -ossl_statem_accept()           ssl/statem/statem.c
      -state_machine(,1)
#+END_EXAMPLE

* 名词解释
 - BER, Basic Encoding Rule
 - DH, Diffie-Hellman
 - DTLS, Datagram Transport Layer Security, 即数据包传输层安全性协议
    : TLS不能用来保证UDP上传输的数据的安全，因此Datagram TLS试图在现存的TLS
    : 协议架构上提出扩展，使之支持UDP，即成为TLS的支持数据报传输的版本
    :
    : DTLS 1.0 基于 TLS 1.1, DTLS 1.2 基于TLS 1.2
 - DSA, Digital Signature Algorithm
 - ECDH, Elliptic Curve Diffie-Hellman
 - ECDSA, Elliptic Curve Digital Signature Algorithm
 - KEA, Key Encryption Algorithm
 - RSA, Rivest-Shamir-Adelman
 - PEM, privacy-enhanced mail
    : a de facto file format for storing and sending cryptography keys, 
    : certificates, and other data

* 参考
 - <<SSL & TLS>>
 - <<SSL & TLS Essential>>
 - <<network security with openssl>>











